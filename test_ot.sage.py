

# This file was *autogenerated* from the file test_ot.sage
from sage.all_cmdline import *   # import sage library

_sage_const_8 = Integer(8); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_7 = Integer(7); _sage_const_10 = Integer(10)
import time
try:
  from sagelib.tdh import TrapdoorHashDDH, TrapdoorHashDDHRate1
  from sagelib.ot import BatchOT, StringOT
  from sagelib.utils import max_length_item
  from sagelib.test_utils import create_p256_curve
except ImportError as e:
  sys.exit("Error loading preprocessed sage files. Try running `make clean pyfiles`. Full error: " + e)

def run_test(function):
  print("******** Running: {} ********".format(function.__name__))
  start = time.perf_counter()
  function()
  end = time.perf_counter()
  print("******** Finished: {} after {:0.4f} seconds ********".format(function.__name__, end - start))

def run_message(function, *args):
  start = time.perf_counter()
  ret = function(*args)
  end = time.perf_counter()
  print(f"Message: {function.__name__}, total time: {end-start:0.4f}")
  return ret

def checkBatchOT(tdh):
  bOT = BatchOT(tdh)
  n = _sage_const_8 
  k = _sage_const_3 
  inp_send = [_sage_const_0 ]*n
  inp_rec = [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_1 ]
  (st, msg1) = run_message(bOT.one, inp_send, k, n)
  msg2 = run_message(bOT.two, msg1, inp_rec, k, n)
  s = run_message(bOT.three, st, msg2, n)
  for j in range(_sage_const_0 , n):
    try:
      if j == _sage_const_1  or j == _sage_const_2  or j == _sage_const_7 :
        assert s[j] == _sage_const_1 
      else:
        assert s[j] == _sage_const_0 
    except AssertionError as e:
      print("j: {}, s[{}]: {}".format(j, j, s[j]))
      raise e

def checkStringOT(tdh):
  inp_send = _sage_const_1 
  inp_rec = ["hello", "btw", "world"]
  sOT = StringOT(tdh, len(inp_rec), max_length_item(inp_rec)*_sage_const_8 )
  (st, msg1) = run_message(sOT.one, inp_send)
  msg2 = run_message(sOT.two, msg1, inp_rec)
  s = run_message(sOT.three, st, msg2)
  try:
    assert s == "btw"
  except AssertionError as e:
    print("s: {}".format(s))
    raise e

def checkDDHBatchOT():
  G, EC, p = create_p256_curve()
  tdh = TrapdoorHashDDH(EC, p, G)
  checkBatchOT(tdh)

def checkDDHStringOT():
  G, EC, p = create_p256_curve()
  tdh = TrapdoorHashDDH(EC, p, G)
  checkStringOT(tdh)

def checkDDHRate1BatchOT():
  G, EC, p = create_p256_curve()
  tdh = TrapdoorHashDDHRate1(EC, p, G, _sage_const_1 /_sage_const_2 **_sage_const_10 )
  checkBatchOT(tdh)

def checkDDHRate1StringOT():
  G, EC, p = create_p256_curve()
  tdh = TrapdoorHashDDHRate1(EC, p, G, _sage_const_1 /_sage_const_2 **_sage_const_10 )
  checkStringOT(tdh)

if __name__ == "__main__":
  run_test(checkDDHBatchOT)
  run_test(checkDDHRate1BatchOT)
  run_test(checkDDHStringOT)
  run_test(checkDDHRate1StringOT)

