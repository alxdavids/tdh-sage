

# This file was *autogenerated* from the file test_tdh.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_8 = Integer(8)
try:
  from sagelib.tdh import TrapdoorHashDDH, TrapdoorHashDDHRate1
  from sagelib.test_utils import create_p256_curve
except ImportError as e:
  sys.exit("Error loading preprocessed sage files. Try running `make clean pyfiles`. Full error: " + e)

def checkDDH():
  """
  Checks the rate-(1/group_length) TDH function from DDH.
  """
  G, EC, p = create_p256_curve()
  tdh = TrapdoorHashDDH(EC, p, G)
  n, i = _sage_const_10 , _sage_const_2 
  hk = tdh.Sample(n)
  for i in range(_sage_const_10 ):
    (ek, td) = tdh.Generate(hk, i)
    x = [_sage_const_0 ]*n
    r = ZZ(tdh.ZZp.random_element())
    H = tdh.Hash(hk, x, r)
    e = tdh.E(ek, x, r)
    hint = [None]*_sage_const_2 
    hint[_sage_const_0 ], hint[_sage_const_1 ] = tdh.D(td, H)
    assert e == hint[x[i]]
    assert e != hint[_sage_const_1 -x[i]]

def checkDDHRate1():
  """
  Checks the rate-1 TDH function from DDH.
  WARNING: This is probabilistic, and will fail with delta + negl probability
  """
  delta = _sage_const_1 /_sage_const_2 **_sage_const_8 
  G, EC, p = create_p256_curve()
  tdh = TrapdoorHashDDHRate1(EC, p, G, delta)
  n, i = _sage_const_10 , _sage_const_2 
  hk = tdh.Sample(n)
  for i in range(_sage_const_10 ):
    (ek, td) = tdh.Generate(hk, i)
    x = [_sage_const_0 ]*n
    x[_sage_const_2 ] = _sage_const_1 
    r = ZZ(tdh.ZZp.random_element())
    H = tdh.Hash(hk, x, r)
    e = tdh.E(ek, x, r)
    hint = [None]*_sage_const_2 
    hint[_sage_const_0 ], hint[_sage_const_1 ] = tdh.D(td, H)
    assert e == hint[x[i]]
    assert e != hint[_sage_const_1 -x[i]]

if __name__ == "__main__":
  checkDDH()
  checkDDHRate1()

